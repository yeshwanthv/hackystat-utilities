#summary Description and instructions for downloading, and using a UriCache library in your code.
#labels Featured

= 1.0 Introduction =

This User Guide provides instructions on how to download, install, configure, and use the Hackystat !UriCache library. It also provides simple examples of library usage.

The !UriCache system is a wrapper around the [http://jakarta.apache.org/jcs/ Apache JCS] system. It is designed to provide an API well suited to the needs of Hackystat services. 

!UriCache relies the JCS !IndexedDiskCache implementation which stores keys and indexes in the memory while all the actual data is stored on the hard drive. !UriCache is a persistent cache, which means that if the Hackystat service is shutdown and !UriCache is able to properly store all the data on the hard drive, it will restore all of the cache content when it is instantiated by the application again.

Note that both keys and actual values for the cached items must be Serializable.

!UriCache will expire items from the cache according to two algorithms:

  # If the user specifies an expiration time when adding an item, then the item will be removed after this expiration time is reached. By default, items expire 24 hours after being added. It is possible to specify an expiration time for the each item individually. 
  # If the maximum cache capacity is reached, then items are removed according to a least recently used algorithm. 

The principles for this cache have been discussed in the following thread: [http://groups.google.com/group/hackystat-dev/msg/9379f301b9db710b "RFC: Caching"].

The !UriCache uses a background optimizer which runs (approximately) every 60 seconds to delete items which are expired.

= 2.0 Downloading =

The !UriCache package is distributed as part of the Hackystat Utilities package, which is incorporated by default into all Hackystat services.  Thus, in most cases you do not need to do anything extra to download or install the !UriCache; it is already prpresent in your system.

It is also possible to download the sources from the [http://code.google.com/p/hackystat-utilities/source Hackystat-Utilities SVN repository], but in that case you will need to build the library from sources. The distribution package comes with both sources and a pre-built libraries.

= 3.0 Prerequisites =

If you wish to build the UriCache system from sources, you will need to install the following packages, environment variables, and Eclipse classpath variables as follows:

|| *Package* || *Version* || *Environment/Classpath Variable* || *Sample Env Value* ||
|| [http://commons.apache.org/logging/ Apache Commons Logging] || 1.1 ||APACHE_COMMONS_LOGGING_HOME || c:\tools\commons-logging-1.1 ||
|| [http://jakarta.apache.org/jcs/ Apache Java Caching System] || 1.3 || APACHE_JCS_HOME || c:\tools\apache-jcs-1.3 ||

!UriCache also uses the util.concurrent Release 1.3.4. by [http://gee.cs.oswego.edu/dl Doug Lea] which is included within the !UriCache package.

= 4.0 Usage =

== 4.1. Configuring !UriCacheProperties == 

Each !UriCache instance is instantiated according to a set of properties specified as a !UriCacheProperties instance.  The following table indicates these properties and their default values:

|| !UriCache property || Default property value || Method to set the custom value ||
|| maxIdleTime || 86400 ms, i.e. 24 hours|| setMaxIdleTime(Long idleTime) ||
|| maxMemoryCacheCapacity || 50000 items || setMaxMemoryCacpacity(Long maxMemoryCacheCapacity) ||
|| cacheStoragePath || current system TEMP folder || setCacheStoragePath(String storagePath) ||
|| loggerLevel || Level.OFF || setLoggerLevel(Level level) ||
 

You can find additional information at the [http://hackystat-utilities.googlecode.com/svn/javadoc/org/hackystat/utilities/uricache/UriCacheProperties.html UriCacheProperties JavaDoc page].

== 4.2. Creating a cache instance ==

The following code indicates the typical way to create a new !UriCache:

{{{
UriCacheProperties prop = new UriCacheProperties();
UriCache<String, String> myURICache = new UriCache<String, String>("myURICache", prop);
}}}

If you are going to create multiple caches in your code don't forget to assign different names to each of those, since these names are file names for the storage, for example:

{{{
// create three properties first
UriCacheProperties stringCacheProp = new UriCacheProperties();
stringCacheProp.setCacheStoragePath("sandbox/cache");

UriCacheProperties intCacheProp = new UriCacheProperties();
intCacheProp.setCacheStoragePath("sandbox/cache");

UriCacheProperties doubleCacheProp = new UriCacheProperties();
doubleCacheProp.setCacheStoragePath("sandbox/cache");

try {
  // create cache instances
  UriCache<String, String> stringCache = new UriCache<String, String>("StringsCache", stringCacheProp);
  UriCache<String, Integer> integerCache = new UriCache<String, Integer>("IntegerCache", intCacheProp);
  UriCache<String, Double> doubleCache = new UriCache<String, Double>("DoubleCache", doubleCacheProp);
}
catch (UriCacheException e) {
  fail("Unable to proceed with cache instantiation: "
       + formatter.format(new LogRecord(Level.ALL, e.toString())));
}
}}}


== 4.3. Caching an item ==

To cache an item you can either of the following two methods:

  * `cache(Serializable uriString, Serializable obj)`. This method caches the item using first parameter as the key.

  * `cache(Serializable uriString, Serializable obj, XMLGregorianCalendar expirationTime)`. This method caches an item and specifies its expiration time.

== 4.4. Retrieving items from the cache ==

To check whether an item is present within the cache and retrieve it, use `lookup(K uriString)`. It returns the item if it was found within the cache and `null` otherwise.

== 4.5. Removing object from cache == 

To remove an item from cache, use `remove(K uriString)`.

You can also use the `clear()` method to remove all items from the cache.

== 4.6. Automatically purging the cache items by memory idle time ==

To specify a time interval value for the automatic cache purging, use the `setMaxMemoryIdleTimeSeconds(int seconds)` method. !UriCache will actively free the memory used by the items if this memory wasn't read within the time interval specified.

== 4.7. Shutting down the cache ==

Note that the `shutdown()` does not clear all elements from the cache. Instead it stores both keys and values on the hard drive in order to load this data on the next start. If you want cache to be reset run `clear()` befor shutting cache down:
{{{
myUriCache.clear();     // removes all items from the cache
myUriCache.shutdown();  // closes the cache 
}}}

You may want see [http://hackystat-utilities.googlecode.com/svn/javadoc/org/hackystat/utilities/uricache/UriCache.html UriCache JavaDocs] for additional information.

= 5.0 Code samples = 

You can get an idea about about coding the !UriCache by looking at the [http://hackystat-utilities.googlecode.com/svn/trunk/src/org/hackystat/utilities/uricache/TestUriCache.java TestUriCache.java] file.



 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
