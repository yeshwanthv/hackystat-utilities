#summary Description and instructions for downloading, and using a UriCache library in your code.

= 1.0 Introduction =

This User Guide provides instructions on how to download, install, configure, and use the Hackystat !UriCache library. It also provides simple examples of library usage.

The !UriCache system is a wrapper around [http://jakarta.apache.org/jcs/ Apache JCS] system, which provides a backbone of the caching mechanism (and brings some overhead with libraries).

= 2.0 Downloading =

You will normally want to download the latest distribution of the !UriCache with others !HackyStat utilities from the [http://hackystat-utilities.googlecode.com/downloads/list Downloads] page. The file will be named hackystat-utilities-{version}.zip. Inside the archive you will find a uricache.lib.jar file which is the !UriCache library.

It is also possible to download the sources from the [http://code.google.com/p/hackystat-utilities/source Hackystat-Utilities SVN repository], but in that case you will need to build the library from sources. The distribution package comes with both sources and a pre-built libraries.

= 3.0 Prerequisites =

Before using UriCache library you will need to install next packages and configure environment variables along with CLASSPATH variables within the Eclipse as follows:

|| *Package* || *Version* || *Environment/Classpath Variable* || *Sample Env Value* ||
|| [http://commons.apache.org/lang/ Apache Commons Lang component] || 2.3 || APACHE_COMMONS_LANG_HOME || c:\tools\commons-lang-2.3 ||
|| [http://commons.apache.org/logging/ Apache Commons Logging] || 1.1 ||APACHE_COMMONS_LOGGING_HOME || c:\tools\commons-logging-1.1 ||
|| [http://jakarta.apache.org/jcs/ Java Caching System] || 1.3 || APACHE_JCS_HOME || c:\tools\apache-jcs-1.3 ||

While !UriCache as JCS relies on usage of util.concurrent Release 1.3.4. by [http://gee.cs.oswego.edu/dl Doug Lea] this particular library jarred within the !UriCache package.

= 4.0 Usage =

In order to use !UriCache library in your code you need to put uricache.lib.jar within your build and run CLASSPATH. Upon instantiation of !UriCache object it will initialize memory and disk caches for it's own use. The memory cache volume limited to 500 objects, once this amount consumed the !UriCache library will use !DiskCache for backing memory cache.  There is a list of methods you might want to use:

== 4.1. Getting cache instance ==

Use UriCacheFactory to get new cache instance: `myURICache = UriCacheFactory.getURICacheInstance();`.

== 4.2. Caching the object ==

To cache an object you may use two methods:

  `cache(String urlString, Object obj)` - this methods caches the object using as a key string provided as the first parameter.

  `cache(String urlString, Object obj, XMLGregorianCalendar expirationTime)` - this method caches object and will purge the memory used by it after the expiration time interval specified as the third parameter.

== 4.3. Checking whether or not object exists within the cache ==

To check an object presence within the cache `lookup(String urlString)` method used. It returns object if it is found within the cache or null if if not.

== 4.4. Removing object from cache == 

To remove an object from cache `remove(String urlString)` method is used.

== 4.5. Automatically purging the cache ==

To specify default time value for the automatic cache purging the `setMaxMemoryIdleTimeSeconds(int seconds)` method used.







